(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@angular/common'),exports, require('@angular/core'), require('@angular/common')) :
  typeof define === 'function' && define.amd ? define('ng2-adsense', ['@angular/core','@angular/common','exports', '@angular/core', '@angular/common'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ng.core,global.ng.common,global['ng2-adsense'] = {}, global.ng.core, global.ng.common));
}(this, (function (ɵngcc0,ɵngcc1,exports, core, common) { 
var _c0 = ["ins"];
'use strict';

  var ADSENSE_TOKEN = new core.InjectionToken('AdsenseConfig');

  var AdsenseComponent = /** @class */ (function () {
      function AdsenseComponent(config, 
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      platform) {
          this.config = config;
          this.platform = platform;
          /** can be manually set if you need all ads on a page to have same id page-xxx */
          this.adRegion = 'page-' + Math.floor(Math.random() * 10000) + 1;
          /**
           * classes applied to the ins element
           */
          this.className = '';
      }
      AdsenseComponent.prototype.ngOnInit = function () {
          var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
          var config = this.config;
          this.adClient = (_a = this.adClient) !== null && _a !== void 0 ? _a : config.adClient;
          this.adSlot = (_b = this.adSlot) !== null && _b !== void 0 ? _b : config.adSlot;
          this.adFormat = (_d = (_c = this.adFormat) !== null && _c !== void 0 ? _c : config.adFormat) !== null && _d !== void 0 ? _d : 'auto';
          this.display = (_f = (_e = this.display) !== null && _e !== void 0 ? _e : config.display) !== null && _f !== void 0 ? _f : 'block';
          this.width = (_g = this.width) !== null && _g !== void 0 ? _g : config.width;
          this.height = (_h = this.height) !== null && _h !== void 0 ? _h : config.height;
          this.layout = (_j = this.layout) !== null && _j !== void 0 ? _j : config.layout;
          this.layoutKey = (_k = this.layoutKey) !== null && _k !== void 0 ? _k : config.layoutKey;
          this.pageLevelAds = (_l = this.pageLevelAds) !== null && _l !== void 0 ? _l : config.pageLevelAds;
          this.adtest = (_m = this.adtest) !== null && _m !== void 0 ? _m : config.adtest;
          this.fullWidthResponsive = (_o = this.fullWidthResponsive) !== null && _o !== void 0 ? _o : config.fullWidthResponsive;
      };
      AdsenseComponent.prototype.ngOnDestroy = function () {
          var iframe = this.ins.nativeElement.querySelector('iframe');
          if (iframe && iframe.contentWindow) {
              iframe.src = 'about:blank';
              iframe.remove();
          }
      };
      AdsenseComponent.prototype.ngAfterViewInit = function () {
          if (common.isPlatformBrowser(this.platform)) {
              this.push();
          }
      };
      AdsenseComponent.prototype.push = function () {
          var p = {};
          if (this.pageLevelAds) {
              p.google_ad_client = this.adClient;
              p.enable_page_level_ads = true;
          }
          if (window) {
              try {
                  // eslint-disable-next-line @typescript-eslint/no-explicit-any
                  (window.adsbygoogle = window.adsbygoogle || []).push(p);
              }
              catch (_a) {
                  // pass
              }
          }
      };
AdsenseComponent.ɵfac = function AdsenseComponent_Factory(t) { return new (t || AdsenseComponent)(ɵngcc0.ɵɵdirectiveInject(ADSENSE_TOKEN), ɵngcc0.ɵɵdirectiveInject(core.PLATFORM_ID)); };
AdsenseComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AdsenseComponent, selectors: [["ng2-adsense"], ["ng-adsense"]], viewQuery: function AdsenseComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c0, true, core.ElementRef);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ins = _t.first);
    } }, inputs: { adRegion: "adRegion", className: "className", adClient: "adClient", adSlot: "adSlot", adFormat: "adFormat", display: "display", width: "width", height: "height", layout: "layout", layoutKey: "layoutKey", pageLevelAds: "pageLevelAds", adtest: "adtest", fullWidthResponsive: "fullWidthResponsive" }, decls: 2, vars: 17, consts: [["ins", ""]], template: function AdsenseComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "ins", null, 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMapInterpolate1("adsbygoogle ", ctx.className, "");
        ɵngcc0.ɵɵstyleProp("display", ctx.display)("width", ctx.width, "px")("height", ctx.height, "px");
        ɵngcc0.ɵɵattribute("data-ad-client", ctx.adClient)("data-ad-slot", ctx.adSlot)("data-ad-format", ctx.adFormat)("data-ad-region", ctx.adRegion)("data-layout", ctx.layout)("data-adtest", ctx.adtest)("data-layout-key", ctx.layoutKey)("data-full-width-responsive", ctx.fullWidthResponsive);
    } }, encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AdsenseComponent, [{
        type: core.Component,
        args: [{
                selector: 'ng2-adsense,ng-adsense',
                template: "\n    <ins\n      #ins\n      class=\"adsbygoogle {{ className }}\"\n      [style.display]=\"display\"\n      [style.width.px]=\"width\"\n      [style.height.px]=\"height\"\n      [attr.data-ad-client]=\"adClient\"\n      [attr.data-ad-slot]=\"adSlot\"\n      [attr.data-ad-format]=\"adFormat\"\n      [attr.data-ad-region]=\"adRegion\"\n      [attr.data-layout]=\"layout\"\n      [attr.data-adtest]=\"adtest\"\n      [attr.data-layout-key]=\"layoutKey\"\n      [attr.data-full-width-responsive]=\"fullWidthResponsive\"\n    >\n    </ins>\n  ",
                changeDetection: core.ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: core.Inject,
                args: [ADSENSE_TOKEN]
            }] }, { type: undefined, decorators: [{
                type: core.Inject,
                args: [core.PLATFORM_ID]
            }] }]; }, { adRegion: [{
            type: core.Input
        }], className: [{
            type: core.Input
        }], adClient: [{
            type: core.Input
        }], adSlot: [{
            type: core.Input
        }], adFormat: [{
            type: core.Input
        }], display: [{
            type: core.Input
        }], width: [{
            type: core.Input
        }], height: [{
            type: core.Input
        }], layout: [{
            type: core.Input
        }], layoutKey: [{
            type: core.Input
        }], pageLevelAds: [{
            type: core.Input
        }], adtest: [{
            type: core.Input
        }], fullWidthResponsive: [{
            type: core.Input
        }], ins: [{
            type: core.ViewChild,
            args: ['ins', { read: core.ElementRef, static: true }]
        }] }); })();
      return AdsenseComponent;
  }());
  AdsenseComponent.ctorParameters = function () { return [
      { type: undefined, decorators: [{ type: core.Inject, args: [ADSENSE_TOKEN,] }] },
      { type: undefined, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] }
  ]; };
  AdsenseComponent.propDecorators = {
      adClient: [{ type: core.Input }],
      adSlot: [{ type: core.Input }],
      adFormat: [{ type: core.Input }],
      adRegion: [{ type: core.Input }],
      display: [{ type: core.Input }],
      width: [{ type: core.Input }],
      height: [{ type: core.Input }],
      layout: [{ type: core.Input }],
      layoutKey: [{ type: core.Input }],
      pageLevelAds: [{ type: core.Input }],
      adtest: [{ type: core.Input }],
      fullWidthResponsive: [{ type: core.Input }],
      className: [{ type: core.Input }],
      ins: [{ type: core.ViewChild, args: ['ins', { read: core.ElementRef, static: true },] }]
  };

  var AdsenseModule = /** @class */ (function () {
      function AdsenseModule() {
      }
      AdsenseModule.forRoot = function (config) {
          if (config === void 0) { config = {}; }
          return {
              ngModule: AdsenseModule,
              providers: [{ provide: ADSENSE_TOKEN, useValue: config }],
          };
      };
AdsenseModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AdsenseModule });
AdsenseModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function AdsenseModule_Factory(t) { return new (t || AdsenseModule)(); }, imports: [[common.CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AdsenseModule, { declarations: [AdsenseComponent], imports: [ɵngcc1.CommonModule], exports: [AdsenseComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AdsenseModule, [{
        type: core.NgModule,
        args: [{
                imports: [common.CommonModule],
                exports: [AdsenseComponent],
                declarations: [AdsenseComponent]
            }]
    }], function () { return []; }, null); })();
      return AdsenseModule;
  }());

  /**
   * Generated bundle index. Do not edit.
   */

  exports.ADSENSE_TOKEN = ADSENSE_TOKEN;
  exports.AdsenseComponent = AdsenseComponent;
  exports.AdsenseModule = AdsenseModule;

  Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ng2-adsense.umd.js.map